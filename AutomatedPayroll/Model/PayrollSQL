from sqlalchemy import Column, Integer, String, DateTime, Date, CHAR, Numeric, Text, ForeignKey, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker
from enum import Enum as PyEnum
from sqlalchemy.types import Enum as SQLEnum

"""
Connecting to the Brewster EMS MySQL dataase and creating an engine to it for easy access and use. Also creating a Base to hold and track all of our 
mappings for our database tables. Adding a session object to allows querying changes and pulling from database engine, and communicating with the database.
"""
engine = create_engine("mysql+pymysql://powerbi:7mNWGrMXmguXXYPiUVaqz3Rlc-7bacV@10.25.8.81:3306/traumasoft_brewster")
Session = sessionmaker(bind = engine)
Base = declarative_base()
session = Session()

class timecard_punches(Base):   
    """
    Mapping for the payroll_archive_timecard_punches table from the SQL database, with the relevant variable names that we will be using from the table
    ready to be loaded with the Schema. 
    """
    __tablename__ = 'payroll_archive_timecard_punches'

    id = Column(Integer, primary_key=True)
    date_line = Column(Date)
    start_time = Column(DateTime)
    end_time = Column(DateTime)
    type = Column(String(40))
    deleted = Column(CHAR(1))
    user_id = Column(Integer, ForeignKey('user_id'))
    pay_period_id = Column(Integer)
    total_hours = Column(Numeric(10,2))
    shift_assignment_id = Column(Integer)

    def __repr__(self):
        return (f"<PayrollArchiveTimecardPunches(id={self.id}, date_line={self.date_line}, "
            f"start_time={self.start_time}, end_time={self.end_time}, type='{self.type}', "
            f"deleted='{self.deleted}', user_id={self.user_id}, pay_period_id={self.pay_period_id}, "
            f"total_hours={self.total_hours}, shift_assignment_id={self.shift_assignment_id})>")

class shift_assignments(Base):
    """
    Mapping for the sched_template_shift_assignments table from the SQL database, with the relevant variable names that we will be using from the table
    ready to be loaded with the Schema. 
    """
    __tablename__ = 'sched_template_shift_assignments'
 
    id = Column(Integer, primary_key = True)
    comments = Column(Text)
    date_line = Column(Date)
    start_time = Column(DateTime)
    end_time = Column(DateTime)

    def __repr__(self):
        return (f"<shift_assignments(id={self.id}, comments={repr(self.comments)}, date_line={self.date_line}, "
                f"start_time={self.start_time}, end_time={self.end_time})>")
    
class punch_discrepancies(Base): 
    """
    Mapping for the user_punch_discrepancies table from the SQL database, with the relevant variable names that we will be using from the table
    ready to be loaded with the Schema. 
    """
    __tablename__ = 'user_punch_discrepancies'

    id = Column(Integer, primary_key= True)
    user_id = Column(Integer, ForeignKey('user_id'))
    timesheet_id = Column(Integer, ForeignKey(''))
    shift_assignment_id = Column(Integer)
    punchout_ts = Column(Integer)
    punchin_early = Column(Integer)
    punchin_late = Column(Integer)
    punchout_early = Column(Integer)
    punchout_late = Column(Integer)
    punchin_form_incomplete = Column(Integer)
    punchout_form_incomplete = Column(Integer)

    def __repr__(self):
        return (f"<punch_discrepancies(id={self.id}, user_id={self.user_id}, timesheet_id={self.timesheet_id}, "
                f"shift_assignment_id={self.shift_assignment_id}, punchout_ts={self.punchout_ts}, "
                f"punchin_early={self.punchin_early}, punchin_late={self.punchin_late}, "
                f"punchout_early={self.punchout_early}, punchout_late={self.punchout_late}, "
                f"punchin_form_incomplete={self.punchin_form_incomplete}, "
                f"punchout_form_incomplete={self.punchout_form_incomplete})>")
    
class statusEnum(PyEnum):
    true = 'active'
    false = 'deactive'

class users(Base):
    """
    Mapping for the users table from the SQL database, with the relevant variable names that we will be using from the table
    ready to be loaded with the Schema. 
    """
    __tablename__ = 'users'

    user_id = Column(Integer, primary_key=True)
    disabled = Column(SQLEnum(statusEnum), default=statusEnum.false, nullable=False)
    deactivated = Column(Integer)
    termination_date = Column(CHAR)
    first_name = Column(String)
    last_name = Column(String)

    def __repr__(self):
     return (f"<User(user_id={self.user_id}, name='{self.first_name} {self.last_name}', "
             f"disabled={self.disabled.name}, deactivated={self.deactivated}, "
             f"termination_date={self.termination_date})>")

    
"""
Queries written to load the SQL database using the schemas written above, from their corresponding table in the database with the necessary information.
"""
punches = session.query(timecard_punches).all()
shifts = session.query(shift_assignments).all()
errors = session.query(punch_discrepancies).all()
employees = session.query(users).all()

for employee in employees:
    print(employee)
"""
This files purpose is to complete the schema and initalization of the important database tables for Automation of Payroll. Allowing for easy querying and data searching through 
the necessary data. 
"""
    